// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RecipeCategory {
  HOT_COFFEE    @map("HOT_COFFEE")
  COLD_COFFEE   @map("COLD_COFFEE")
  ESPRESSO      @map("ESPRESSO")
  SPECIALTY     @map("SPECIALTY")
  BEGINNER      @map("BEGINNER")
  ADVANCED      @map("ADVANCED")
  QUICK         @map("QUICK")
  TRADITIONAL   @map("TRADITIONAL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  blogs         Blog[]
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  publishDate DateTime
  readTime    String
  imageUrl    String
  tags        String[]
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Recipe {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  ingredients String[]
  instructions String[]
  difficulty  String
  prepTime    String
  categories  RecipeCategory[]
  imageUrl    String
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  author    String
  storeId   String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  phone     String
  hours     Json     // Store hours as JSON object
  website   String?
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  images        String[]        // Array of image URLs
  roastLevel    RoastLevel
  origins       String[]        // Array of origins
  process       CoffeeProcess
  flavor        String[]        // Array of flavors
  category      ProductCategory
  brewingMethods String[]       // Array of brewing methods
  variants      ProductVariant[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  weight    Int
  price     Float
  inStock   Boolean  @default(true)
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoastLevel {
  Light
  Medium
  Dark
  MediumDark
}

enum CoffeeProcess {
  Washed
  Natural
  Honey
  Anaerobic
  WetHulled
}

enum ProductCategory {
  beans
  ground
  capsules
}

enum BrewingMethod {
  Espresso
  Filter
  FrenchPress
  PourOver
  ColdBrew
  MokaPot
  AeroPress
}

model Waitlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  name        String
  phone       String
  countryCode String
  position    Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 